import base64import jsonimport osimport tempfileimport pytestfrom demo_app import create_appfrom demo_app.db import init_db@pytest.fixturedef client():    db_fd, db_path = tempfile.mkstemp()    app = create_app({'TESTING': True, 'DATABASE': db_path})    with app.test_client() as client:        with app.app_context():            init_db()        yield client    os.close(db_fd)    os.unlink(db_path)TEST_DATA = {    'username': 'Jsmith',    'password': 'test',    'firstname': 'John',    'lastname': 'Smith',    'phone': '0405114911'}def setUp(client):    res = client.post('/api/users', json=TEST_DATA, headers={'Content-Type': 'application/json'})    assert res.status_code == 201def get_token(client, username, password):    user_login = "{}:{}".format(username, password)    credentials = base64.b64encode(f'{user_login}'.encode()).decode('utf-8')    res = client.get("/api/auth/token",                     headers={"Authorization": f"Basic {credentials}", "Content-Type": "application/json"})    assert res.status_code == 200    data = json.loads(res.data)    token = data['token']    return tokendef test_create_user(client):    setUp(client)def test_get_all_users(client):    setUp(client)    res = client.get('/api/users', headers={"Content-Type": "application/json"})    assert res.status_code == 200def test_get_single_user(client):    setUp(client)    token = get_token(client, TEST_DATA['username'], TEST_DATA['password'])    res = client.get(f"/api/users/{TEST_DATA['username']}",                     headers={"Token": f"{token}", "Content-Type": "application/json"})    assert res.status_code == 200def test_update_single_user(client):    setUp(client)    token = get_token(client, TEST_DATA['username'], TEST_DATA['password'])    res = client.put(f"/api/users/{TEST_DATA['username']}", json={"firstname": "Bezos"},                     headers={"Token": f"{token}", "Content-Type": "application/json"})    assert res.status_code == 201